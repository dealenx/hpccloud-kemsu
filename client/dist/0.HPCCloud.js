(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./src/workflows/openfoam/helmholtz/lib sync recursive":
/*!***************************************************!*\
  !*** ./src/workflows/openfoam/helmholtz/lib sync ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./src/workflows/openfoam/helmholtz/lib sync recursive\";\n\n//# sourceURL=webpack:///./src/workflows/openfoam/helmholtz/lib_sync?");

/***/ }),

/***/ "./src/workflows/openfoam/helmholtz/lib/index.js":
/*!*******************************************************!*\
  !*** ./src/workflows/openfoam/helmholtz/lib/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAsyncModule = void 0;\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nconst getAsyncModule = async ({\n  components,\n  loadRemoteComponent,\n  isRemote,\n  repoURL\n}) => {\n  const asyncForEach = async (array, callback) => {\n    for (let index = 0; index < array.length; index++) {\n      /* eslint-disable */\n      await callback(array[index], index, array);\n      /* eslint-enable */\n    }\n  };\n\n  const initCustomComponents = async componentsName => {\n    const list = {};\n    await asyncForEach(componentsName, async compName => {\n      const comp = await Promise.resolve(\"./\".concat(compName)).then(s => _interopRequireWildcard(__webpack_require__(\"./src/workflows/openfoam/helmholtz/lib sync recursive\")(s)));\n      list[compName] = comp.default;\n    });\n    return { ...list\n    };\n  };\n\n  const initCustomRemoteComponents = async componentsName => {\n    const list = {};\n    await asyncForEach(componentsName, async compName => {\n      const comp = await loadRemoteComponent(\"\".concat(repoURL, \"/\").concat(compName, \".js\"));\n      list[compName] = comp;\n    });\n    return { ...list\n    };\n  };\n\n  let customComponents = {};\n  const compNames = ['Input', 'Introduction'];\n\n  if (isRemote) {\n    customComponents = await initCustomRemoteComponents(compNames);\n  } else {\n    customComponents = await initCustomComponents(compNames);\n  }\n\n  const moduleObject = {\n    name: 'OpenFoam - Helmholtz',\n    simputTypeFile: 'simput-openfoam_helmholtz.js',\n    // logo,\n    components: {\n      NewSimulation: null\n    },\n    requiredAttachments: {\n      project: [],\n      simulation: []\n    },\n    config: {\n      cluster: {\n        'config.openfoam.enable': {\n          type: 'bool',\n          label: 'OpenFoam enabled',\n          description: 'Check if the cluster is able to run OpenFoam simulation'\n        }\n      }\n    },\n    steps: {\n      _order: ['Introduction', 'Input', 'Simulation', 'Visualization'],\n      _disabled: ['Visualization'],\n      _initial_state: {\n        Introduction: {\n          type: 'input',\n          metadata: {\n            alwaysAvailable: true\n          }\n        },\n        Input: {\n          type: 'input',\n          metadata: {}\n        },\n        Simulation: {\n          type: 'output',\n          metadata: {}\n        },\n        Visualization: {\n          type: 'output',\n          metadata: {}\n        }\n      },\n      Introduction: {\n        default: customComponents.Introduction\n      },\n      Input: {\n        default: customComponents.Input\n      },\n      Simulation: {\n        default: components.stepSimulationStart,\n        run: components.stepSimulationView\n      },\n      Visualization: {\n        default: components.stepVisualizationStart,\n        run: components.stepVisualizationView\n      }\n    },\n    taskFlows: {\n      Simulation: 'hpccloud.taskflow.openfoam.helmholtz.OpenFOAMTaskFlow',\n      Visualization: 'hpccloud.taskflow.paraview.visualizer.ParaViewTaskFlow'\n    },\n    primaryJobs: {\n      Simulation: 'openfoam_run',\n      Visualization: 'paraview'\n    },\n    labels: {\n      Introduction: {\n        default: 'Introduction'\n      },\n      Input: {\n        default: 'Dataset selection'\n      },\n      Simulation: {\n        default: 'Simulation',\n        run: 'Simulation (running)'\n      },\n      Visualization: {\n        default: 'Visualization',\n        run: 'Visualization (running)'\n      }\n    }\n  };\n  return moduleObject;\n}; // export default helmholtzModule;\n\n\nexports.getAsyncModule = getAsyncModule;\n\n//# sourceURL=webpack:///./src/workflows/openfoam/helmholtz/lib/index.js?");

/***/ })

}]);