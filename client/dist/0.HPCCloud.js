(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./src/workflows/openfoam/helmholtz/index-es5.js":
/*!*******************************************************!*\
  !*** ./src/workflows/openfoam/helmholtz/index-es5.js ***!
  \*******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.getAsyncModule = exports.hello = void 0;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nvar helmholtzModule = {\n  name: 'OpenFoam - Helmholtz',\n  // logo,\n  requiredAttachments: {\n    project: [],\n    simulation: []\n  },\n  config: {\n    cluster: {\n      'config.openfoam.enable': {\n        type: 'bool',\n        label: 'OpenFoam enabled',\n        description: 'Check if the cluster is able to run OpenFoam simulation'\n      }\n    }\n  },\n  steps: {\n    _order: ['Introduction' // 'Input',\n    // 'Simulation',\n    // 'Visualization',\n    ],\n    _disabled: ['Visualization'],\n    _initial_state: {\n      Introduction: {\n        type: 'input',\n        metadata: {\n          alwaysAvailable: true\n        }\n      } // Input: {\n      //   type: 'input',\n      //   metadata: {},\n      // },\n      // Simulation: {\n      //   type: 'output',\n      //   metadata: {},\n      // },\n      // Visualization: {\n      //   type: 'output',\n      //   metadata: {},\n      // },\n\n    },\n    Introduction: {\n      \"default\": null\n    } // Input: {\n    //   default: stepInput,\n    // },\n    // Simulation: {\n    //   default: stepSimulationStart,\n    //   run: stepSimulationView,\n    // },\n    // Visualization: {\n    //   default: stepVisualizationStart,\n    //   run: stepVisualizationView,\n    // },\n\n  },\n  taskFlows: {\n    Simulation: 'hpccloud.taskflow.openfoam.helmholtz.OpenFOAMTaskFlow',\n    Visualization: 'hpccloud.taskflow.paraview.visualizer.ParaViewTaskFlow'\n  },\n  primaryJobs: {\n    Simulation: 'openfoam_run',\n    Visualization: 'paraview'\n  },\n  labels: {\n    Introduction: {\n      \"default\": 'Introduction'\n    } // Input: {\n    //   default: 'Dataset selection',\n    // },\n    // Simulation: {\n    //   default: 'Simulation',\n    //   run: 'Simulation (running)',\n    // },\n    // Visualization: {\n    //   default: 'Visualization',\n    //   run: 'Visualization (running)',\n    // },\n\n  }\n};\nvar hello = 'Hello world';\nexports.hello = hello;\n\nvar getAsyncModule = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", helmholtzModule);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAsyncModule() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.getAsyncModule = getAsyncModule;\nvar _default = helmholtzModule;\nexports[\"default\"] = _default;\n\n//# sourceURL=webpack:///./src/workflows/openfoam/helmholtz/index-es5.js?");

/***/ })

}]);