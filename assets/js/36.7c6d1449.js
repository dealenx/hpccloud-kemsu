(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{377:function(t,e,a){"use strict";a.r(e);var s=a(33),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"начаnо-работы"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#начаnо-работы"}},[t._v("#")]),t._v(" Начало работы")]),t._v(" "),a("p",[t._v("Платформа HPCCloud включает в себя множество различных компонентов. Качественный запуск всей платформы «вручную» - задача нетривиальная, так как каждый компонент зависит один от другого, поэтому развёртывание осуществляется через программное обеспечение Docker, которое синхронно запускает по конфигурации каждый компонент в отдельно взятых виртуальных контейнерах.")]),t._v(" "),a("p",[t._v("Репозиторий содержит конфигурацию для развертывания. Это самый быстрый способ начать работу с HPCCloud. Развертывание подходит для тестирования и разработки, однако не рекомендуется для продакшена, поскольку все развертывается на одной машине.")]),t._v(" "),a("p",[t._v("Требуемые характеристики:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker-compose >= 1.17.0"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.docker.com/get-docker/",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker >= 19.03.12"),a("OutboundLink")],1)])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Стоит заметить")]),t._v(" "),a("p",[t._v("Что развертывание проверялось на Ubuntu 18.04 и Linux Mint 19")])]),t._v(" "),a("br"),t._v(" "),a("a",{staticStyle:{background:"#3eaf7c",padding:"12px",color:"white"},attrs:{href:"installation.html#docker"}},[t._v("Установка Docker")]),t._v(" "),a("h2",{attrs:{id:"развертывание"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#развертывание"}},[t._v("#")]),t._v(" Развертывание")]),t._v(" "),a("h3",{attrs:{id:"быстрый-запуск"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#быстрый-запуск"}},[t._v("#")]),t._v(" Быстрый запуск")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone https://github.com/dealenx/hpccloud-kemsu.git\ncd hpccloud-kemsu\n")])])]),a("p",[t._v("Необходимо обновить образы и произвести "),a("code",[t._v("build")]),t._v(" контейнеров:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker-compose pull\ndocker-compose build\n")])])]),a("p",[t._v("И запустить контейнеры:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker-compose up -d\n")])])]),a("p",[t._v("Необходимо проверить, что ansible завершил начальную конфигурацию платформы:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker logs -f hpccloudkemsu_ansible_1\n")])])]),a("p",[t._v("После запуска контейнеров вы можете подключиться к http://localhost:8888 и авторизоваться под "),a("code",[t._v("demo/letmein")]),t._v(" "),a("br"),t._v("\nили "),a("code",[t._v("hpccloud/letmein")])]),t._v(" "),a("p",[t._v("Если вам необходимо остановить контейнеры, то выполните:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker-compose down\n")])])]),a("h3",{attrs:{id:"development"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#development"}},[t._v("#")]),t._v(" Development")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("Внимание")]),t._v(" "),a("p",[t._v("Перед началом разработки необходимо установить необходимое ПО. Помимо Node.js крайне рекомендуемо установить nvm и yarn.")]),t._v(" "),a("p",[a("a",{staticStyle:{background:"#3eaf7c",padding:"12px",color:"white"},attrs:{href:"installation.html#node-js"}},[t._v("Установка Node.js, nvm и yarn")])])]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("И так, начнем с создания общей папки "),a("code",[t._v("hpccloud-workflow")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mkdir hpccloud-workflow\ncd hpccloud-workflow\n")])])]),a("p",[t._v("Необходимо будет настроить такую структуру папок:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("├── hpccloud-workflow\n│\t├── hpccloud-kemsu\n│\t├── simput-kemsu\n\n")])])]),a("p",[t._v("Поэтому клонируем репозитории в папке "),a("code",[t._v("hpccloud-workflow")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone https://github.com/dealenx/hpccloud-kemsu.git\ngit clone https://github.com/dealenx/simput-kemsu.git\n")])])]),a("p",[t._v("После того, как запустились Docker-контейнеры, можно приступать к разработке.")]),t._v(" "),a("p",[t._v("Хочу заметить, что фронтенд HPCCloud стабильно запускается только на Node.js v10. Поэтому, если у вас, например, установлена Node.js версии 12, то важно иметь настроенный "),a("code",[t._v("nvm")]),t._v(", который удобно может сменить версию Nodejs на необходимую.")]),t._v(" "),a("p",[t._v("Команды для разработки фронтенда:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("cd hpccloud-kemsu\nnvm use 10\nnpm install\nnpm run build:watch\n")])])]),a("p",[t._v("После запуска "),a("code",[t._v("build:watch")]),t._v(" обновленный билд будет доступен в папке "),a("code",[t._v("dist")]),t._v(" и Docker-контейнер монтирует эту папку, предоставляя доступ на "),a("code",[t._v("localhost:8888")])]),t._v(" "),a("p",[t._v("Что касается бекенда, то внутри контейнера монтируются все исходные файлы, а также запуск Girder происходит в режиме разработчика "),a("code",[t._v("girder serve --mode development")]),t._v(".")]),t._v(" "),a("p",[t._v("Поэтому измененные плагины в папке "),a("code",[t._v("./server")]),t._v(" будут автоматически обновляться.")]),t._v(" "),a("p",[t._v("Пример просматриваемых логов в контейнере girder после запуска и обновление исходных файлов:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Running in mode: development\nConnecting to MongoDB: mongodb://mongodb:27017/girder\nLoaded plugin "cumulus_plugin"\nLoaded plugin "sftp"\nLoaded plugin "taskflow"\nLoaded plugin "hpccloud_plugin"\nLoaded plugin "pvwproxy_plugin"\n[19/Apr/2020:13:26:15] ENGINE Bus STARTING\nStarted asynchronous event manager thread.\n[19/Apr/2020:13:26:15] ENGINE Started monitor thread \'Autoreloader\'.\n[19/Apr/2020:13:26:15] ENGINE Serving on http://0.0.0.0:8080\n[19/Apr/2020:13:26:15] ENGINE Bus STARTED\n')])])]),a("h2",{attrs:{id:"simput"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simput"}},[t._v("#")]),t._v(" Simput")]),t._v(" "),a("p",[t._v("Руководство по подготовке Simput-кейсов не доделано, здесь приведены необходимые команды, но без пояснения.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cd simput-kemsu\n$ nvm use 10\n$ npm install\n$ npm run build\n$ npm link\n$ Simput\n\n  Usage: Simput [options]\n\n  Options:\n\n    -h, --help                    output usage information\n    -V, --version                 output the version number\n\n    -i, --input [file|directory]  Input file or directory\n    -o, --output [directory]      Output directory to output to\n    -t, --type [type]             Type of input\n\n    --no-gui                      Just generate output\n    -s, --silent                  Do not open the browser\n\n    -c, --compile [directory]     Directory to compile files\n    -m, --minify                  Minify compiled file\n    -a, --add [file]              Add model to list of available inputs\n    -l, --list                    List model types of available as inputs\n    -r, --remove [type]           Remove model to list of available inputs\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("cd types/openfoam_tutorials\nSimput -c src/ -o versions/ -t openfoam_tutorials\nSimput -a versions/openfoam_tutorials.js\ncd ../../\nSimput -mc types/openfoam_tutorials/src/ -t openfoam_tutorials -o dist/types\n")])])]),a("p",[t._v("Перейти в hpccloud-kemsu")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cd ../hpccloud-kemsu\n$ npm run install:simput\n#or npm run install:openfoam\n")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);